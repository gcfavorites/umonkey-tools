#!/usr/bin/env python
# vim set: fileencoding=utf-8 tw=0:

"""Personal automation script.  Replaces and organizes a number of
smaller scripts.

To enable zsh completion, add this to ~/.zshrc:

    fpath=($HOME/.config/zsh/completion $fpath)
    autoload -Uz compinit
    compinit
"""

import glob
import itertools
import os
import subprocess
import sys


PACKAGE_NAMES = [
    "abook",
    "afuse",
    "audacity",
    "bti",
    "csstidy",
    "devscripts",
    "dh-make",
    "docbook-xsl",
    "docbook2x",
    "dput",
    "exfalso",
    "eyed3",
    "ffmpeg",
    "flac",
    "flip",
    "frei0r-plugins",
    "g++",
    "git-core",
    "gmrun",
    "idjc",
    "inkscape",
    "jack-capture",
    "jack-tools",
    "jackmeter",
    "libsox-fmt-all",
    "lame",
    "libsox-fmt-ffmpeg",
    "libsox-fmt-mp3",
    "maximus",
    "mercurial",
    "mp3gain",
    "mplayer-nogui",
    "msmtp-mta",
    "pbuilder",
    "pep8",
    "php5-cli",
    "rtorrent",
    "s3cmd",
    "shotwell",
    "skype",
    "soundconverter",
    "sox",
    "sqlite3",
    "sshfs",
    "task",
    "tidy",
    "vnstat",
    "vorbis-tools",
    "vorbisgain",
    "wmctrl",
    "xdotool",
]

UBUNTU_PACKAGE_NAMES = [
    "collectd",
]


def run(command):
    if type(command) != list:
        command = [normalize_command_arg(arg) for arg in command.split(" ")]
        command = list(itertools.chain(*command))

    prefix = os.geteuid() == 0 and "#" or "$"
    print "%s %s" % (prefix, " ".join(command))
    subprocess.Popen(command).wait()


def normalize_command_arg(arg):
    if arg.startswith("~/"):
        arg = os.path.expanduser(arg)
    elif arg.startswith("$"):
        arg = os.path.expandvars(arg)
    if "*" in arg:
        tmp = glob.glob(arg)
        if tmp:
            arg = tmp
    if type(arg) != list:
        arg = [arg]
    return arg


def main(args):
    if len(args):
        command = args[0]
        args.pop(0)
    else:
        command = "help"
    return main_task(command, args)


def main_task(task_name, args):
    func_name = "task_" + task_name.replace("-", "_")
    if func_name not in globals():
        raise Exception("Unknown task: %s" % task_name)

    func = globals()[func_name]
    return func(*args)


def need_root():
    """retarts the command with root privileges, if necessary"""
    if os.geteuid() == 0:
        return
    try:
        run("sudo %s" % " ".join(sys.argv))
    finally:
        exit(0)


def get_task_list():
    """returns a list of (name, description) tuples."""
    commands = []
    for name, func in sorted(globals().items()):
        if not name.startswith("task_"):
            continue
        name = name[5:].replace("_", "-")
        desc = getattr(func, "__doc__") or "no description"
        commands.append((name, desc))
    return commands


def task_help():
    """show this screen"""
    commands = get_task_list()

    maxlen = max([len(k) for k, v in commands])
    fmt = "  %%-%us -- %%s" % (maxlen + 2)

    print "Available commands:"
    for name, desc in commands:
        print fmt % (name, desc)


def task_dump_zsh_completion(filename=None):
    """prints the zsh completion script"""
    output = "#compdef %s\n" % os.path.basename(sys.argv[0])
    output += "#generated by %s\n" % " ".join(sys.argv)

    fmt = lambda k, v: "%s:'%s'" % (k, v)
    args = [fmt(k, v) for k, v in get_task_list()]

    output += "_arguments \"1:Command:((%s))\"" % " ".join(args)

    if filename is not None:
        if not os.path.exists(os.path.dirname(filename)):
            os.mkdirs(os.path.dirname(filename))
        file(filename, "wb").write(output.encode("utf-8"))
    else:
        print output


def task_ardj_database(*args):
    """opens a remote ardj database console"""
    run("ssh -t cloud.tmradio.net ardj db-console")


def task_clean_mail(*args):
    """delete old mail from the archive mailbox"""
    run("fdm -a archive fetch")


def task_clean_vcs():
    """purge and compress git repositories"""
    run("find . -name .git -exec git --git-dir={} gc \\;")


def task_edit_hotline_config():
    """edit hotline.yaml in the cloud"""
    run("ssh -t radio@cloud.umonkey.net vim .config/hotline.yaml")


def task_edit_self():
    """edit this script"""
    run("vim %s" % sys.argv[0])
    run("%s dump-zsh-completion ~/.config/zsh/completion/_%s" % (sys.argv[0], os.path.basename(sys.argv[0])))


def task_edit_tmradio_schedule():
    """edits the tmradio.net schedule and commits changes"""
    run("editor ~/src/sites/tmradio.net/src/input/schedule.txt")
    run("make -C ~/src/sites/tmradio.net/src commit")


def task_clean():
    run("rm -rf ~/.local/share/zeitgeist ~/.local/share/Trash/* ~/.dropbox-dist")
    run("find ~/tmp ~/.adobe/Flash_Player/AssetCache ~/.thumbnails ~/.config/roxterm.sourceforge.net/Sessions ~/.local/gpodder-downloads ~/.local/share/Trash ~/.macromedia/Flash_Player ~/.opera/cache ~/.opera/application_cache ~/.opera/icons ~/.shotwell/thumbs -type f -mtime +30 -print -delete")
    run("find ~/tmp -empty -delete")
    #task_clean_mail()


def task_upgrade_gae():
    """upgrades Google App Engine"""
    import re
    import urllib2
    import zipfile

    fetch = lambda url: urllib2.urlopen(url).read()

    data = fetch("http://code.google.com/p/googleappengine/downloads/list?can=2&q=python+sdk+OpSys%3AAll&colspec=Filename")
    r = re.search("(google_appengine_[0-9\.]+\.zip)", data)
    if r is None:
        print "Could not find latest GAE version number."
        return False

    url = "http://googleappengine.googlecode.com/files/" + r.group(0)
    print "Downloading %s" % url

    zipname = os.path.expanduser("~/tmp/gae.zip")
    file(zipname, "wb").write(fetch(url))

    dirname = os.path.expanduser("~/src")
    print "Extracting to %s" % dirname
    zip = zipfile.ZipFile(zipname, "r")
    zip.extractall(dirname)

    os.unlink(zipname)


def task_upgrade_packages():
    """upgrade installed packages"""
    need_root()
    run("apt-get update")
    run("apt-get dist-upgrade")


def task_purge_packages():
    """remove data used by packages that were uninstalled"""
    run("apt-get autoremove --purge")
    #run("dpkg -l | awk '/^rc/ { print $2 }' | xargs --no-run-if-empty dpkg --purge")
    run("apt-get clean")


def task_upgrade():
    """upgrade installed packages and purge"""
    task_upgrade_packages()
    task_purge_packages()


def task_list_installed_packages():
    """lists installed packages"""
    run("dpkg --get-selections")


def task_edit_openbox_config():
    """edit and reload the openbox config"""
    run("editor ~/.config/openbox/mintlxde-rc.xml")
    run("pkill -USR2 openbox")


def task_edit_quotes():
    """edit all quote files"""
    run("~/bin/quotes")


def task_edit_podcasts():
    """edit podcast-merger.conf on cloud.umonkey.net"""
    run("ssh -t cloud.umonkey.net vim .config/podcast-merger.conf")


def task_edit_calendar():
    """edit calendar events"""
    run("vim ~/.gcalrc")
    run("gcal -c")


def task_edit_hotline_config():
    """edit the hotline config"""
    run("ssh -t radio@cloud.umonkey.net vim .config/hotline.yaml")


def task_install_shortcuts():
    """install local desktop files system-wide"""
    need_root()
    run("desktop-file-install ~/.local/share/applications/umonkey-*.desktop")


def task_start_mongo():
    """starts mongodb"""
    run("sudo /usr/sbin/service mongodb start")


def task_stop_most():
    """stops mongodb, nginx etc"""
    run("sudo /usr/sbin/service mongodb stop")
    run("sudo /usr/sbin/service nginx stop")


def task_install_packages():
    """install commonly used packages"""
    need_root()
    run("apt-get install %s" % " ".join(PACKAGE_NAMES))


def task_hold_package(name):
    """locks a package to the currently installed version"""
    need_root()


def task_chroot(name=None):
    """opens a chrooted shell"""
    if name is None:
        name = "default"
    run("sudo schroot -c %s -u root" % name)


def task_live(name=None):
    """start broadcasting"""
    if name is None:
        name = "test"
    run("broadcast %s" % name)


def task_deploy_ardj():
    """upload ardj to the cloud"""
    run("tar cf ~/tmp/ardj.tar --directory ~/src/ardj/src/ardj --exclude *.pyc .")
    run("scp ~/tmp/ardj.tar cloud.umonkey.net:")
    run("ssh -t cloud.umonkey.net sudo tar xf ardj.tar --directory /usr/lib/python2.6/dist-packages/ardj/ ; rm ardj.tar ; sudo restart ardj-server")
    run("rm -f ~/tmp/ardj.tar")


def task_izumr_old():
    run("ssh -t izumr.mongo1 mongo izumr")


def task_izumr_new():
    run("ssh -t izumr.mongo1 mongo izumr2")


def task_setup_pbuilder():
    """configures the build environment"""
    # http://arcierisinasce.wordpress.com/2011/01/29/linux-mint-repository-on-debian/
    run("sudo ln -fs /usr/share/debootstrap/scripts/sid /usr/share/debootstrap/scripts/debian")
    run("sudo pbuilder create --distribution debian --debootstrapopts --variant=buildd")


def task_radio(*args):
    """run make on radio@cloud"""
    run(["ssh", "radio@cloud.umonkey.net", "make", "-C", "/radio"] + list(args))


def task_recloud():
    """reset the cloud ssh connection"""
    run(["pkill", "-f", "ssh -ACXt cloud.umonkey.net"])


def task_record_jack():
    """record voice using jack_capture"""
    run("jack_capture --channels 1 --port system:capture_1")


def task_record_skype():
    """record local voice and skype using jack_capture"""
    run(["jack_capture",
        "--port", "system:capture_1",
        "--port", "PulseAudio JACK Sink:front-right"])


def task_record_skype_with_mplayer():
    """record local voice and skype and mplayer using jack_capture"""
    run(["jack_capture",
        "--port", "system:capture_1",
        "--port", "PulseAudio JACK Sink:front-right",
        "--port", "mplayer_mc:out_0",
        "--port", "mplayer_mc:out_1"])


def task_restart_ardj_server():
    """restart ardj-server in the cloud"""
    run("ssh cloud.umonkey.net sudo restart ardj-server")


if __name__ == "__main__":
    main(sys.argv[1:])
