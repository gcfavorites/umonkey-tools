#!/usr/bin/env python

import os
import sys


def load_module(filename):
    """Loads and returns the specified module (always loads ./dodo.py
    currently)."""
    if not os.path.exists(filename):
        return None

    import dodo
    return dodo


def get_task_names(filename):
    mod = load_module(filename)
    tasks = []
    for member in dir(mod):
        if not member.startswith("task_"):
            continue
        if member.startswith("task__"):
            continue
        if member == "task_default":
            continue
        tasks.append(member[5:])
    return mod, tasks


def print_tasks(filename):
    mod, task_names = get_task_names(filename)

    tasks = []
    for name in task_names:
        func = getattr(mod, "task_" + name, None)

        doc = getattr(func, "__doc__", "").split("\n")[0].replace("'", "")
        tasks.append("%s\\:'%s'" % (name, doc))

    tasks.append("clean\\:'clean action / remove targets'")
    tasks.append("list\\:'list tasks from dodo file'")
    tasks.append("forget\\:'clear successful run status from DB'")
    tasks.append("ignore\\:'ignore task (skip) on subsequent runs'")
    tasks.append("auto\\:'automatically run doit when a dependency changes'")
    tasks.append("help\\:'show help / reference'")

    print "1:Select target:((%s))" % " ".join(sorted(tasks))


def get_options(filename, option, existing):
    mod = load_module(filename)

    fn = getattr(mod, "task_" + option, None)
    if fn is None:
        return []  # no such command

    info = fn()
    if type(info) != dict:
        return []  # unexpected result

    if "params" not in info:
        return []  # nothing to show

    params = ["--" + param["long"] for param in info["params"]]
    return [param for param in params if param not in existing]


def print_help(filename):
    mod, names = get_task_names(filename)
    print "2:Select command:((%s))" % " ".join(names)


def print_options(filename, option, existing):
    if option == "help":
        print_help(filename)
    else:
        options = get_options(filename, option, existing)
        print "*:Select parameter:((%s))" % " ".join(options)


if __name__ == "__main__":
    sys.path.insert(0, ".")

    if len(sys.argv) <= 2:
        print_tasks(sys.argv[1])

    elif len(sys.argv) >= 3:
        print_options(sys.argv[1], sys.argv[2], sys.argv[5:])
