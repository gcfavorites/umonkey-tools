#!/usr/bin/env python
# vim: set fileencoding=utf-8:
#
# Logs in to Yandex.Money, retrieves all history, writes it to CSV/JSON files
# and prints the stats.  Uses the "Export as CSV" function.  Reads
# configuration from ~/.config/yandex-money.yaml which must look like this:
#
#   yandex_money:
#     login: john
#     password: secret
#     csv_file: filename.csv
#     json_file: filename.json
#
# If csv or json files aren't specified, they're not written.
#
# @author hex@umonkey.net (Justin Forest)
# @license Public Domain

import StringIO
import csv
import json
import os
import pycurl
import re
import sys
import time
import urllib
import yaml

def fetch_data(conf):
    c = pycurl.Curl()
    c.setopt(pycurl.COOKIEFILE, 'cookies.txt')

    c.setopt(pycurl.URL, 'https://passport.yandex.ru/passport?mode=auth&from=money&retpath=https%3A%2F%2Fmoney.yandex.ru%2F&msg=money')
    c.setopt(pycurl.POSTFIELDS, urllib.urlencode({ 'login': conf['login'], 'passwd': conf['password'] }))
    c.perform()

    out = StringIO.StringIO()
    c.setopt(pycurl.URL, 'https://money.yandex.ru/history-csv.xml?from-time=1.1.2010&to-time=%s&max-rows=1000&order=PAYMENTDATE' % time.strftime('%d.%m.%Y'))
    c.setopt(pycurl.POSTFIELDS, '')
    c.setopt(pycurl.WRITEFUNCTION, out.write)
    c.perform()

    c.close()
    return u'\n'.join([l for l in out.getvalue().decode('windows-1251').split('\n')][4:]).encode('utf-8')

def calculate(text, conf):
    income = outcome = left = 0
    records = []
    cleanup_re = re.compile('[^0-9,]+')

    for rec in csv.reader(text.split('\n'), delimiter=';'):
        if rec:
            sign, date, sum_, status, message = rec[:5]
            sum_ = float(cleanup_re.sub('', sum_).replace(',', '.'))
            if sign == '+':
                income += sum_
            elif sign == '-':
                outcome += sum_
            mul = sign == '+' and 1 or -1
            records.append([ date, sum_ * mul, message.decode('utf-8') ])

    records = sorted(records, key=lambda r: time.strptime(r[0], '%d.%m.%Y %H:%M'))

    if conf.has_key('json_file'):
        data = { 'income': income, 'outcome': outcome, 'left': income - outcome, 'transactions': records }
        open(conf['json_file'], 'wb').write(json.dumps(data, ensure_ascii=False).encode('utf-8'))

    if conf.has_key('csv_file'):
        writer = csv.writer(open(conf['csv_file'], 'wb'))
        for row in records:
            row[2] = row[2].encode('utf-8')
            writer.writerow(row)

    return income, outcome, income - outcome

if __name__ == '__main__':
    confname = os.path.expanduser('~/.config/yandex-money.yaml')
    if len(sys.argv) > 1:
        confname = sys.argv[1]
    conf = yaml.load(open(confname, 'rb'))

    if not conf.has_key('yandex_money'):
        print 'Config file does not have a "yandex_money" section.'
        sys.exit(1)
    conf = conf['yandex_money']

    if not conf.has_key('login') or not conf.has_key('password'):
        print 'To update Yandex.Money history you must have the %s file with "login", "password" and "csv_file" properties.' % confname
        sys.exit(1)

    income, outcome, left = calculate(fetch_data(conf), conf)

    print 'Income.... %8.02f' % income
    print 'Outcome... %8.02f' % outcome
    print 'Left...... %8.02f' % left
