#!/usr/bin/env python

import os
import subprocess
import sys


def run(command):
    if type(command) != list:
        command = [normalize_command_arg(arg) for arg in command.split(" ")]
    print "> %s" % " ".join(command)
    subprocess.Popen(command).wait()


def normalize_command_arg(arg):
    if arg.startswith("~/"):
        return os.path.expanduser(arg)
    elif arg.startswith("$"):
        return os.path.expandvars(arg)
    return arg


def main(args):
    if len(args):
        command = args[0]
        args.pop(0)
    else:
        command = "help"
    return main_task(command, args)


def main_task(task_name, args):
    func_name = "task_" + task_name.replace("-", "_")
    if func_name not in globals():
        raise Exception("Unknown task: %s" % task_name)

    func = globals()[func_name]
    return func(*args)


def get_task_list():
    """returns a list of (name, description) tuples."""
    commands = []
    for name, func in sorted(globals().items()):
        if not name.startswith("task_"):
            continue
        name = name[5:].replace("_", "-")
        desc = getattr(func, "__doc__") or "no description"
        commands.append((name, desc))
    return commands


def task_help():
    """show this screen"""
    commands = get_task_list()

    maxlen = max([len(k) for k, v in commands])
    fmt = "  %%-%us -- %%s" % (maxlen + 2)

    print "Available commands:"
    for name, desc in commands:
        print fmt % (name, desc)


def task_dump_zsh_completion(filename=None):
    """prints the zsh completion script"""
    output = "#compdef %s\n" % os.path.basename(sys.argv[0])
    output += "#generated by %s\n" % " ".join(sys.argv)

    fmt = lambda k, v: "%s:'%s'" % (k, v)
    args = [fmt(k, v) for k, v in get_task_list()]

    output += "_arguments \"1:Command:((%s))\"" % " ".join(args)

    if filename is not None:
        file(filename, "wb").write(output.encode("utf-8"))
    else:
        print output


def task_clean_mail(*args):
    """delete old mail from the archive mailbox"""
    run("fdm -a archive fetch")


def task_clean_vcs():
    """purge and compress git repositories"""
    run("find . -name .git -exec git --git-dir={} gc \\;")


def task_edit_self():
    """edit this script"""
    run("vim %s" % sys.argv[0])
    run("%s dump-zsh-completion ~/.config/zsh/completion/_%s" % (sys.argv[0], os.path.basename(sys.argv[0])))


def task_clean():
    run("rm -rf ~/.local/share/zeitgeist ~/.local/share/Trash/* ~/.dropbox-dist")
    run("find ~/tmp ~/.adobe/Flash_Player/AssetCache ~/.thumbnails ~/.config/roxterm.sourceforge.net/Sessions ~/.local/gpodder-downloads ~/.local/share/Trash ~/.macromedia/Flash_Player ~/.opera/cache ~/.opera/application_cache ~/.opera/icons ~/.shotwell/thumbs -type f -mtime +30 -print -delete")
    run("find ~/tmp -empty -delete")
    #task_clean_mail()


def task_upgrade_packages():
    """upgrade installed packages"""
    run("sudo apt-get update")
    run("sudo apt-get dist-upgrade")


def task_purge_packages():
    """remove data used by packages that were uninstalled"""
    run("sudo apt-get autoremove --purge")
    #run("dpkg -l | awk '/^rc/ { print $2 }' | xargs --no-run-if-empty sudo dpkg --purge")
    run("sudo apt-get clean")


def task_upgrade():
    """upgrade installed packages and purge"""
    task_upgrade_packages()
    task_purge_packages()


def task_list_installed_packages():
    """lists installed packages"""
    run("dpkg --get-selections")


def task_edit_openbox_config():
    """edit and reload the openbox config"""
    run("editor ~/.config/openbox/mintlxde-rc.xml")
    run("pkill -USR2 openbox")


def task_edit_quotes():
    """edit all quote files"""
    run("~/bin/quotes")


def task_edit_podcasts():
    """edit podcast-merger.conf on cloud.umonkey.net"""
    run("ssh -t cloud.umonkey.net vim .config/podcast-merger.conf")


def task_edit_calendar():
    """edit calendar events"""
    run("vim ~/.gcalrc")
    run("gcal -c")


def task_edit_hotline_config():
    """edit the hotline config"""
    run("ssh -t radio@cloud.umonkey.net vim .config/hotline.yaml")


if __name__ == "__main__":
    main(sys.argv[1:])
